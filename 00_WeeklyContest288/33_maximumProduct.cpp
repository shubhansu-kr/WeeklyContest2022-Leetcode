// Maximum Product After K Increments

// You are given an array of non-negative integers nums and an integer k.
// In one operation, you may choose any element from nums and increment it by 1.

// Return the maximum product of nums after at most k operations. Since the answer
// may be very large, return it modulo 109 + 7.

#include <bits/stdc++.h>
using namespace std;

class Solution
{
    // Time limit exceeded 
    // [358903,296554,512009,445991,543554,304676,962692,218847,382164,888949,85175,595419,
    // 946754,300816,156495,807145,931370,501443,698349,948064,443584,522454,938622,791967,
    // 593705,493312,489327,622119,881947,464966,109076,763995,448572,4563,101204,711625,
    // 229135,348928,811164,109740,123769,731749,367985,769689,263957,383208,137175,94476,
    // 144918,413923,779433,713306,814362,262638,799745,34328,269558,409451,473794,78710,
    // 389081,197833,327105,17666,310200,385056,768019,473327,907234,939602,693433,909846
    // ,798500,59487,981202,254713,247350,134589,596154,567643,263654,24141,807851,649081
    // ,83303,511032,502607,128110,410408,51201,192010,745431,788687,322913,48918,751629
    // ,658025,279463,895013,235875,716212,676777,236915,881925,652416,547888,825145,144383
    // ,299805,398037,695991,478180,952573,132224,963675,708189,584806,68573,823419,877428
    // ,501643,266567,29102,970634,785656,917826,778653,409264,622116,483993,617427,712853
    // ,120107,668907,596007,256655,875437,633041,783021,479108,347205,70040,166064,880921
    // ,691771,415388,635344,556234,690984,908034,627282,645349,990589,613239,510880,976790
    // ,182304,108823,973811,947394,491552,825774,523223,998013,26141,645789,574574,948541
    // ,590285,129907,956785,151869,932609,242435,764549,84546,787433,395796,809892,207663
    // ,635707,310725,132725,116407,178803,261542,709032,581934,187972,176656,84532,932333
    // ,867153,345037,310296,252130,904525,823099,757411,498957,896729,707322,972876,916746
    // ,304356,152499,410771,878991,190990,549694,714133,312140,357807,976450,610465,129348
    // ,627622,944309,117704,347340,704097,871814,165303,874758,208764,831176,219782,87553
    // ,781734,130582,852356,232666,113929,917133,314162,558701,196433,155919,820276,991703
    // ,126053,160497,594106,883887,896668,235003,215975,73589,223038,144732,883906,40159
    // ,285547,529058,361552,276402,657814,10,610991,462031,735074,832050,103533,644733
    // ,201352,425898,869851,655600,857306,726485,826136,339617,878026,264830,287606,67207
    // ,593973,276332,697109,225376,44554,321538,420426,613109,389683,480859,393291,215590
    // ,557133,705044,272754,446549,401018,305519,533378,616032,316862,949795,450595,163017
    // ,426796,19303,164216,613889,708366,878202,597786,889751,130227,583733,216183,634333
    // ,466454,853978,113843,59248,251253,1538,107484,806022,474608,952704,593805,744652
    // ,184147,802229,79216,45317,378274,465255,670733,910508,868472,246258,705585,478830
    // ,819109,245199,834811,841777,75542,152226,707303,443321,411981,344141,402625,899338
    // ,309246,423908,55461,368151,545249,743042,432349,415798,63092,929689,47080,732137,
    // 463036,479531,758531,962018,731101,527795,723722,698062,808633,322212,245219,484102,
    // 459238,103383,492567,239044,590789,618484,472913,790903,64085,949235,540476,200060,
    // 567756,670504,317429,708138,572328,291206,987802,680776,234461,690893,393737,584556,
    // 544713,198143,451612,390577,168456,737020,495958,33679,424117,733758,101888,471610,
    // 712293,243556,866145,256263,355377,576341,143842,439566,210312,27803,125277,839536,
    // 49497,702342,643770,370984,800306,864898,855839,535001,86109,719721,213411,213812,
    // 765782,975863,11242,165488,579948,265945,568923,195654,906493,786641,437143,102962,
    // 524518,145941,351102,782747,762713,436343,182903,542319,955027,904361,882954,397693
    // ,889189] 91164
public:
    int maximumProduct(vector<int> &nums, int k)
    {
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] > 0)
            {
                break;
            }
            if (nums[i] == 0)
            {
                if (k)
                {
                    nums[i]++;
                    k--;
                }
                else
                {
                    return 0;
                }
            }
        }
        while (k)
        {
            // Prone to time limit exceed
            sort(nums.begin(), nums.end());
        
            nums[0]++;
            k--;
        }

        int res = 1;
        const unsigned int M = 1000000007;
        for (int i = 0; i < nums.size(); i++)
        {
            res = (res * nums[i]) % M;
        }
        return res;
    }
};

class Solution
{
    // Wrong answer
public:
    int maximumProduct(vector<int> &nums, int k)
    {
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] > 0)
            {
                break;
            }
            if (nums[i] == 0)
            {
                if (k)
                {
                    nums[i]++;
                    k--;
                }
                else
                {
                    return 0;
                }
            }
        }
        nums[0] += k;
        int res = 1;
        const unsigned int M = 1000000007;
        for (int i = 0; i < nums.size(); i++)
        {
            res = (res * nums[i]) % M;
        }
        return res;
    }
};

int main()
{

    return 0;
}